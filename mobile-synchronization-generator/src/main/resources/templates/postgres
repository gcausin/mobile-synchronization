copyInsertStatement:
    select
        'insert into "'||c2.table_schema||'"."'||c1.table_name||'"('||string_agg(c1.column_name, ', ')||') select '||string_agg(c1.column_name, ', ')||' from "'||c1.table_schema||'"."'||c1.table_name||'"'
    from
        information_schema.columns c1
        join information_schema.columns c2
            on c1.table_name = c2.table_name
            and c1.column_name = c2.column_name
    where
        c1.table_name = '~entity~'
    and
        c1.table_schema = '~fromSchema~'
    and
        c2.table_schema = '~schema~'
    group by
        c1.table_name,
        c1.table_schema,
        c2.table_schema

createTableTemplate:
    create table "~schema~"."~entity~" (
        pk
            varchar(36)
            constraint "~entity~ Pk" primary key
            default uuid_generate_v4(),
    ~modifiedDate~~referencingAttributes~~tableAttributes~~uniqueTableConstraint~)

createViewTemplate:
    create view "~schema~".~view~ as select * from "~schema~"."~entity~"

createAccountsView:
    create or replace view "~schema~".accounts as
    select
        u.pk,
        cast(u.name as text) as name,
        a.password,
        cast(r.name as text) as role
    from
        "~schema~".appUser u
        left join "~schema~".Account a on a.userFk = u.pk
        left join "~schema~".UserRole ur on ur.userFk = u.pk
        left join "~schema~".Role r on ur.roleFk = r.pk

setSearchPath:
    -- For convenient access of view please execute:
    set search_path to "~schema~", public;

modifiedDate:
        modifiedDate
            timestamp
            not null
            default date_trunc('milliseconds', clock_timestamp() at time zone 'utc'),

referencingAttribute:
        ~referencingProperty~        varchar(36)~isNullable~
            constraint ~referenceConstraintName~                   references "~schema~"."~referencedEntity~",

referencingProperty:
    ~referenceProperty~Fk

referenceConstraintName:
    "~ReferenceProperty~ of ~entity~"

tableAttribute:
        ~attributeName~
            ~attributeType~~isNullable~,

uniqueTableConstraint:
        constraint "Unique ~entity~" unique(~uniqueTableConstraint~)

userDependencyInsertStatementNoParent:
    insert into "~schema~"."UserDependency"(tableName) values ('~entity~')

userDependencyInsertStatementWithParent:
    insert into "~schema~"."UserDependency"(tableName, priorUserDependencyFk)
    select '~entity~', pk from "~schema~"."UserDependency"
    where tableName = '~parentEntity~'

createFunctionIsOwner:
    CREATE or replace FUNCTION "~schema~"."IsOwner"(pUser text, pTable text, pPk text) RETURNS boolean AS $$
        DECLARE
        
            userPk text;
            ownerName citext;
    
        BEGIN
        
            select
                "DependentUserFk",
                u.name
            from
                "~schema~"."DependentUserFk"(pTable, pPk)
                left join "~schema~"."User" u
                    on u.pk = "DependentUserFk"
                    and u.name = pUser
            into
                userPk,
                ownerName;
            
            if userPk is null then
                return null;
            else
                return ownerName is not null;
            end if;
    
        END;
    $$ LANGUAGE plpgsql

createFunctionDependentUserFk:
    CREATE or replace FUNCTION "~schema~"."DependentUserFk"(pTable text, pPk text) RETURNS text AS $$
        DECLARE
        
            dependencyQuery text;
            userPk text;
    
        BEGIN
        
            select sql from "~schema~"."UserDependencyQuery" into dependencyQuery where tableName = pTable;
            
            EXECUTE dependencyQuery INTO userPk USING pPk;
            
            --RAISE NOTICE 'Select: %, %', dependencyQuery, userPk;
            
            return userPk;
    
        END;
    $$ LANGUAGE plpgsql

createQueryOfUserDependency:
    insert into "~schema~"."UserDependencyQuery"(tableName, sql)
    select
    	'~entity~',
    	string_agg(
            case
                when lag is null and lead is null then 'select $1'
                when count = level then 'select ' || lag || '.userFk from '
                when count - 1 = level then '"~schema~"."' || tableName || '" ' || tableName
                else 'join "~schema~"."' || tableName || '" ' || tableName || ' on ' ||
                        tableName || '.' || lead || 'Fk = ' || lead || '.pk'
            end ||
            case
                when level = 1 and lead is not null then ' where ' || tableName || '.pk = $1'
                else ''
            end,
        ' ') 
    from
        (
            with recursive tree as (
                select
                    pk,
                    priorUserDependencyFk,
                    case when tableName = 'User' then 'u' else tablename end,
                    1 AS level
                from
                    "~schema~"."UserDependency"
                where
                    tableName = '~entity~'
                union all
                select
                    t.pk,
                    t.priorUserDependencyFk,
                    t.tableName,
                    c.level + 1
                from
                    tree c
                join
                    "~schema~"."UserDependency" t
                on
                    t.pk = c.priorUserDependencyFk
            )
            select
                level,
                tableName,
                lead(tableName) over (ORDER BY level),
                lag(tableName) over (ORDER BY level),
                count(*) over (partition by 'x')
            from
                tree
            order by
                level desc
        ) a

createFunctionNotifyDeletedRecord:
    CREATE or replace FUNCTION "~schema~"."NotifyDeletedRecord"() RETURNS trigger AS $$
        BEGIN
        
            --RAISE NOTICE 'TRIGER called on %', TG_TABLE_NAME;
           
            insert into "~schema~"."DeletedRecord"(userFk, entityName, entityPk)
            values( "~schema~"."DependentUserFk"(TG_TABLE_NAME, old.pk), TG_TABLE_NAME, old.pk);
           
            RETURN OLD;
        END;
    $$ LANGUAGE plpgsql

createTriggerNotifyDeletedRecord:
    CREATE TRIGGER "NotifyDeletedRecord"
    BEFORE DELETE ON "~schema~"."~entity~"
    FOR EACH ROW
    EXECUTE PROCEDURE "~schema~"."NotifyDeletedRecord"()

